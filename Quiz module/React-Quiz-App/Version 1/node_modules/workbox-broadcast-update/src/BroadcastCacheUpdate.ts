/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/

import {assert} from 'workbox-core/_private/assert.js';
import {timeout} from 'workbox-core/_private/timeout.js';
import {resultingClientExists} from 'workbox-core/_private/resultingClientExists.js';
import {CacheDidUpdateCallbackParam} from 'workbox-core/types.js';
import {logger} from 'workbox-core/_private/logger.js';
import {responsesAreSame} from './responsesAreSame.js';
import {
  CACHE_UPDATED_MESSAGE_META,
  CACHE_UPDATED_MESSAGE_TYPE,
  DEFAULT_HEADERS_TO_CHECK,
  NOTIFY_ALL_CLIENTS,
} from './utils/constants.js';

import './_version.js';

// UA-sniff Safari: https://stackoverflow.com/questions/7944460/detect-safari-browser
// TODO(philipwalton): remove once this Safari bug fix has been released.
// https://bugs.webkit.org/show_bug.cgi?id=201169
const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);

// Give TypeScript the correct global.
declare let self: ServiceWorkerGlobalScope;

export interface BroadcastCacheUpdateOptions {
  headersToCheck?: string[];
  generatePayload?: (
    options: CacheDidUpdateCallbackParam,
  ) => Record<string, any>;
  notifyAllClients?: boolean;
}

/**
 * Generates the default payload used in update messages. By default the
 * payload includes the `cacheName` and `updatedURL` fields.
 *
 * @return Object
 * @private
 */
function defaultPayloadGenerator(
  data: CacheDidUpdateCallbackParam,
): Record<string, any> {
  return {
    cacheName: data.cacheName,
    updatedURL: data.request.url,
  };
}

/**
 * Uses the `postMessage()` API to inform any open windows/tabs when a cached
 * response has been updated.
 *
 * For efficiency's sake, the underlying response bodies are not compared;
 * only specific response headers are checked.
 *
 * @memberof workbox-broadcast-update
 */
class BroadcastCacheUpdate {
  private readonly _headersToCheck: string[];
  private readonly _generatePayload: (
    options: CacheDidUpdateCallbackParam,
  ) => Record<string, any>;
  